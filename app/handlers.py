from datetime import datetime
from core.classes import Date_Manipulete, DataBaseCommand
from sqlite3 import Error
import logging
from aiogram import Bot
from aiogram.types import Message
from config import ADMIN_ID, DONAT_INFO
from data.list_of_greetings import birthday_wishes
import random
from aiogram.fsm.context import FSMContext
from app.FSM import StepsForm_New_User, StepsForm_Update_User
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramForbiddenError


async def hello_message(message: Message, state: FSMContext) -> None:
    await message.answer("–ü—Ä–∏–≤—ñ—Ç!üëã–î–∞–≤–∞–π –¥–æ–¥–∞–º–æ —Ç–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, \n—â–æ–± —è –º—ñ–≥ –ø–∞–º'—è—Ç–∞—Ç–∏ –π–æ–≥–æ —Ç–∞ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ!üéÇ")
    await DataBaseCommand.reg_new_user(
        first_name = message.from_user.first_name,
        last_name = message.from_user.last_name,
        user_id = message.from_user.id, 
        user_nickname = message.from_user.username
    )
    await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ\n–î–∞—Ç–∞-–ú—ñ—Å—è—Ü—å-–†—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 01 01 2001 –∞–±–æ 01-01-2001),\n—â–æ–± —è –º—ñ–≥ –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.')
    await state.set_state(StepsForm_New_User.ADD_NEW_USER)


    


async def add_to_DB(message: Message, state: FSMContext, bot: Bot) -> None:
    date = Date_Manipulete(message.text)
    if isinstance(date.recognition_birthday_date(), datetime):
        brth_date = date.datetime_in_str()
        await DataBaseCommand.add_birthday_date(
            brth_date,
            message.from_user.id
        )
        await message.answer('–î—è–∫—É—é –∑–∞ –Ω–∞–¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!')
        await state.clear()
    else:
        await message.answer('–í–∏ –≤–≤–µ–ª–∏ –¥–∞—Ç—É —Å–≤–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π –æ—á—ñ–∫—É–≤–∞–≤—Å—è.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–†')

    list_users = await DataBaseCommand.check_birthday_date()
    non_birthday_persons = set()
    all_chats = await DataBaseCommand.select_all_chats_id() 
    for user in list_users:
        Date = Date_Manipulete(user[0])  # birthday_date
        days_left = Date.calculate_message_day_remind()
        if  0 > days_left >= -7:
            persons_list = await DataBaseCommand.select_non_birthday_persons(user[1])# user id
            non_birthday_persons.update(persons_list)
            chat_with_birthday_user = []
            for chat in all_chats:
                chat_member = await bot.get_chat_member(chat, user[1])
                if chat_member.status in ["creator", "member", "administrator"] :
                    chat_with_birthday_user.append(chat)
                    sended_users = []
            for chat in chat_with_birthday_user:
                for nb_user in non_birthday_persons:
                    chat_member = await bot.get_chat_member(chat, nb_user)
                    if chat_member.status in ["creator", "member", "administrator"] and nb_user not in sended_users and days_left == -1:
                        await bot.send_message(nb_user , text = f'–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user[2]}</b> {user[3]} –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!üéâ\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—èüéÇ')  # first and nickname
                        sended_users.append(nb_user)
                    elif chat_member.status in ["creator", "member", "administrator"] and nb_user not in sended_users and -1 > days_left > -5:
                        await bot.send_message(nb_user , text = f'–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user[2]}</b> {user[3]} —á–µ—Ä–µ–∑ {abs(days_left)} –¥–Ω–Ü –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!üéâ\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—èüéÇ')
                        sended_users.append(nb_user)
                    elif chat_member.status in ["creator", "member", "administrator"] and nb_user not in sended_users and -5 >= days_left >= -7:
                        await bot.send_message(nb_user , text = f'–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user[2]}</b> {user[3]} —á–µ—Ä–µ–∑ {abs(days_left)} –¥–Ω–Ü–≤ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!üéâ\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—èüéÇ')
                        sended_users.append(nb_user)
            non_birthday_persons.clear()

        elif days_left == 0:
            chat_with_birthday_user = []
            existing_chats = []
            for chat in all_chats:
                try:
                    chat_member = await bot.get_chat_member(chat, user[1])
                    if chat_member.status in ["creator", "member", "administrator"]:
                        chat_with_birthday_user.append(chat)
                except TelegramForbiddenError:
                        await DataBaseCommand.delete_old_chat(chat)
            for chat in chat_with_birthday_user:
                await bot.send_message(chat, f'üéâüéâüéâ –£ {user[2]} {user[3]} —Å—å–æ–≥–æ–¥–Ω—ñ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéâüéâüéâ')
                await bot.send_message(chat, text = random.choice(birthday_wishes))
                existing_chats.append(chat)
        


async def reminder(bot: Bot) -> None:
    '''
    UA: –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ë–î. –Ø–∫—â–æ —î - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—Å—ñ —á–∞—Ç–∏ –≤ —è–∫–∏—Ö —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ –±–æ—Ç.
        –¢–∞–∫–æ–∂ –Ω–∞–≥–∞–¥—É—î —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º, —è–∫—ñ –∑ —ñ–º–µ–Ω–Ω–∏–∫–æ–º –ø–µ—Ä–µ–±—É–≤–∞—é—Ç—å —É –æ–¥–Ω–æ–º—É —á–∞—Ç—ñ, —â–æ –¥–µ–Ω—å –π–æ–≥–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –±—É–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–¥—ñ–ª—é.
    EN: The function checks if there is a birthday date in the user's database. If there is, it sends a message to all chats in which the user and the bot are in.
        Moreover, it reminds other users who have the same nickname as the user who has the birthday date, that the birthday date of the user will be in one week.
    '''
    list_users = await DataBaseCommand.check_birthday_date()
    non_birthday_persons = set()
    all_chats = await DataBaseCommand.select_all_chats_id() 
    for user in list_users:
        Date = Date_Manipulete(user[0])  # birthday_date
        days_left = Date.calculate_message_day_remind()
        if  days_left == -7:
            persons_list = await DataBaseCommand.select_non_birthday_persons(user[1])# user id
            non_birthday_persons.update(persons_list)
            chat_with_birthday_user = []
            for chat in all_chats:
                chat_member = await bot.get_chat_member(chat, user[1])
                if chat_member.status in ["creator", "member", "administrator"] :
                    chat_with_birthday_user.append(chat)
            sended_users = []
            for chat in chat_with_birthday_user:
                for nb_user in non_birthday_persons:
                    chat_member = await bot.get_chat_member(chat, nb_user)
                    if chat_member.status in ["creator", "member", "administrator"] and nb_user not in sended_users:
                        await bot.send_message(nb_user , text = f'–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user[2]}</b> {user[3]} —á–µ—Ä–µ–∑ –Ω–µ–¥—ñ–ª—é –±—É–¥–µ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!üéâ\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—èüéÇ')  # first and nickname
                        sended_users.append(nb_user)
            non_birthday_persons.clear()

        elif days_left == 0:
            chat_with_birthday_user = []
            existing_chats = []
            for chat in all_chats:
                try:
                    chat_member = await bot.get_chat_member(chat, user[1])
                    if chat_member.status in ["creator", "member", "administrator"]:
                        chat_with_birthday_user.append(chat)
                except TelegramForbiddenError:
                        await DataBaseCommand.delete_old_chat(chat)
            for chat in chat_with_birthday_user:
                await bot.send_message(chat, f'üéâüéâüéâ –£ {user[2]} {user[3]} —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è! üéâüéâüéâ')
                await bot.send_message(chat, text = random.choice(birthday_wishes))
                existing_chats.append(chat)
    


            await bot.send_message(ADMIN_ID,  f'#Admin# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user[2]} {user[3]} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —É —á–∞—Ç–∏ {existing_chats}')
            all_chats.clear()
            


async def start_bot(bot: Bot) -> None:
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–≤—Å—è")


async def stop_bot(bot: Bot) -> None:
    await bot.send_message(ADMIN_ID, "–ë–æ—Ç –∑–∞–∫—Ä–∏–≤—Å—è")


async def update_brthday_pre_message(message: Message, state: FSMContext) -> None:
    await DataBaseCommand.reg_new_user(
        first_name = message.from_user.first_name,
        last_name = message.from_user.last_name,
        user_id = message.from_user.id, 
        user_nickname = message.from_user.username
    )
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ \n—Ñ–æ—Ä–º–∞—Ç—ñ –î–î-–ú–ú-–†–†–†–† –¥–ª—è —ó—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
    await state.set_state(StepsForm_Update_User.CHANGE_DATE)


async def update_brthday(message: Message, state: FSMContext) -> None:
    date = Date_Manipulete(message.text)
    if isinstance(date.recognition_birthday_date(), datetime):
        brth_date = date.datetime_in_str()
        await DataBaseCommand.update_birthday_date(
            brth_date,
            message.from_user.id
        )
        await message.answer('–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞')
        await state.clear()
    else:
        await message.answer('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–∞—Ç—É –∞–±–æ –¥–∞—Ç—É, —è–∫–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ñ–æ—Ä–º–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ')


async def help_func(message: Message) -> None:
    await message.answer(text="–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –≤–∞–º —Ç–∞ –≤–∞—à–∏–º –¥—Ä—É–∑—è–º –∑–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–≥–∞–¥—É—î –ø—Ä–æ –Ω–∏—Ö –∑–∞–≤—á–∞—Å–Ω–æ.\n\
–©–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –≤–∞–º–∏ –¥–∞—Ç—É, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /view")


async def view_func(message: Message) -> None:
    date = await DataBaseCommand.check_my_data(message.from_user.id)
    if date:
        await message.answer(f'–í–∏ –≤–∫–∞–∑–∞–ª–∏, —â–æ –≤–∞—à–µ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {date[0]}p.')
    else:
        await message.answer('–í–∏ —â–µ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è')


async def admin_info(message: Message) -> None:
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n/see - –í–∏–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –∑ –ë–î —É —á–∞—Ç\n/delete [id] - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î\n ")
        await message.answer(f"@{message.from_user.username}")


async def admin_see_all_users(message: Message) -> None:
    if message.from_user.id == ADMIN_ID:
        table = await DataBaseCommand.select_all()
        for raw in table:
            await message.answer(f"{raw}")


async def admin_delete_user(message: Message) -> None:
    '''
    –í–∏–¥–∞–ª—è—î –∑ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞ –≤–∫–∞–∑–∞–Ω–∏–º ID
    –§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –∑–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –≤ —á–∞—Ç - "delete id"
    '''
    if message.from_user.id == ADMIN_ID:
        try:
            await DataBaseCommand.admin_delete_User_from_db(int(message.text.strip()[7:]))
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–ê {message.text.strip()[7:]} –±—É–ª–æ  –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            logging.debug(
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–ê {message.text.strip()[7:]} –±—É–ª–æ  –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        except Error:
            await message.answer("–¢–∏ –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            logging.info(Error)

async def admin_sql_requests(message: Message) -> None:
    '''
    –ü—Ä–æ–±—Ä–æ—Å –∑–∞–ø–∏—Ç—ñ–≤ SQL —á–µ—Ä–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ
    –§—É–Ω–∫—Ü—ñ—è —è–∫–∞ –∑–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –≤ —á–∞—Ç - "SQL –∑–∞–ø–∏—Ç"
    '''
    if message.from_user.id == ADMIN_ID:
        try:
            await DataBaseCommand.sql_commads_admin(message.text.strip()[4:])
            logging.debug(f"–ö–æ–º–∞–Ω–¥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ")
        except Error:
            await message.answer("–¢–≤—ñ–π SQL –∑–∞–ø–∏—Ç –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π")
            logging.info(Error)
            await message.answer(text=Error)

async def hello_in_goup(message : Message, bot: Bot) -> None:
    markup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚è©–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è‚è™",url="https://t.me/Local_birthday_bot")]])
    await bot.send_message(message.chat.id , text="–ü—Ä–∏–≤—ñ—Ç —É—Å—ñ–º! üëã –ú–µ–Ω–µ –¥–æ–¥–∞–ª–∏ –¥–æ —Ü—å–æ–≥–æ —á–∞—Ç—É, —â–æ–± —è –º—ñ–≥ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –≤–∞–º –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥—Ä—É–∑—ñ–≤. üéâ\n\–Ø –≤–º—ñ—é –≤–µ—Å—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –ø—Ä–æ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤–∞—à–∏—Ö –¥—Ä—É–∑—ñ–≤ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö, –∞ —Ç–∞–∫–æ–∂ –≤—ñ—Ç–∞—Ç–∏ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤ —É –≥—Ä—É–ø—ñ. üéÇ", 
                           reply_markup = markup)
    await DataBaseCommand.add_new_chats_in_db(message.chat.id)
    await bot.send_message(ADMIN_ID, f"–ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ —É –≥—Ä—É–ø—É ({message.chat.title})") 
    logging.info(f"–ë–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ —É –≥—Ä—É–ø—É----({message.chat.id})----{message.chat.title}----")

async def donate_messege(message : Message) -> None:
    await message.answer(F"–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–ø—ñ–π–∫–æ—é –º–æ–∂–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∏: \n{DONAT_INFO}")

    